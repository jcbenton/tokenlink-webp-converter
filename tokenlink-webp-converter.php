<?php
/*
Plugin Name: TokenLink WebP Converter
Plugin URI: https://github.com/jcbenton/tokenlink-webp-converter
Description: Generate .webp versions of JPG/PNG images and register them in the WordPress Media Library. Adds “Create .webp” and “Delete Original” buttons on image details. Uses Imagick (preferred) or GD fallback. Single-file, nonce-protected, no external JS/CSS.
Version: 1.2.2
Author: Jerry Benton
Author URI: https://www.mailborder.com
License: GPLv3 or later
License URI: https://www.gnu.org/licenses/gpl-3.0.html
Text Domain: tokenlink-webp-converter
*/

/**
 * Main entry point for the TokenLink WebP Converter plugin.
 *
 * @package TokenLinkWebPConverter
 * @version 1.2.2
 * @author  Jerry Benton
 * @license GPLv3-or-later
 */

/**
 * Prevent direct access to the plugin file.
 *
 * This check ensures the plugin cannot be executed directly outside of WordPress,
 * protecting against unauthorized access to internal PHP logic.
 */
if ( ! defined( 'ABSPATH' ) ) {
    exit;
}

/**
 * --------------------------------------------------------------------------
 * CONSTANT DEFINITIONS
 * --------------------------------------------------------------------------
 *
 * TLWPC_OPT       — Option key used for storing plugin settings in wp_options.
 * TLWPC_META_MARK — Metadata marker for timestamping processed attachments.
 */
define( 'TLWPC_OPT',        'tlwpc_options' );
define( 'TLWPC_META_MARK',  '_tlwpc_last' );

/**
 * --------------------------------------------------------------------------
 * PLUGIN ACTIVATION HOOK
 * --------------------------------------------------------------------------
 *
 * Runs once when the plugin is activated. Initializes default settings
 * for image quality and thumbnail conversion.
 *
 * Behavior:
 * ---------
 * - Sets default WebP quality to 82 (near-lossless compression).
 * - Enables thumbnail conversion by default.
 * - Merges existing options to preserve prior settings on reactivation.
 *
 * @see register_activation_hook()
 * @see update_option()
 */
register_activation_hook( __FILE__, function () {
    $defaults = array(
        'quality'         => 82,
        'convert_thumbs'  => 1,
    );
    $existing = get_option( TLWPC_OPT, array() );
    update_option( TLWPC_OPT, array_merge( $defaults, (array) $existing ) );
});

/**
 * --------------------------------------------------------------------------
 * ADMIN MENU REGISTRATION
 * --------------------------------------------------------------------------
 *
 * Adds the TokenLink WebP Converter settings page to the WordPress admin panel.
 * The page appears under **Settings → TokenLink WebP** and provides
 * configuration options for quality and thumbnail handling.
 *
 * @see add_options_page()
 * @see tlwpc_render_settings_page()
 */
add_action( 'admin_menu', function () {
    add_options_page(
        __( 'TokenLink WebP Converter', 'tokenlink-webp-converter' ),
        __( 'TokenLink WebP', 'tokenlink-webp-converter' ),
        'manage_options',
        'tlwpc',
        'tlwpc_render_settings_page'
    );
});


/**
 * Render the TokenLink WebP Converter settings page in the WordPress admin.
 *
 * This function generates the admin UI for configuring the plugin’s behavior.
 * It provides options for WebP output quality and whether to also convert
 * intermediate thumbnail sizes generated by WordPress.
 *
 * The settings are stored in the serialized option `TLWPC_OPT` and updated
 * when the user submits the form. Access is restricted to administrators
 * with the `manage_options` capability.
 *
 * Security:
 * - Access limited to users with `manage_options`.
 * - Uses `check_admin_referer()` for CSRF protection.
 * - All POST input is sanitized via `sanitize_text_field()` and `wp_unslash()`.
 *
 * Behavior:
 * - Displays current option values for “WebP Quality” and “Convert Thumbnails”.
 * - Saves updated settings when the form is submitted.
 * - Shows a confirmation notice when settings are successfully saved.
 *
 * @since 1.0.0
 * @since 1.2.0 Input sanitization improved and nonce verification added.
 *
 * @global array $_POST Used to handle form submissions.
 * @return void Outputs HTML directly to the admin page.
 */
function tlwpc_render_settings_page() {
    // Only allow users with appropriate privileges.
    if ( ! current_user_can( 'manage_options' ) ) {
        wp_die( esc_html__( 'Insufficient privileges.', 'tokenlink-webp-converter' ) );
    }

    // Load stored settings or defaults.
    $opts = get_option( TLWPC_OPT, array() );
    $quality        = (int) ( $opts['quality'] ?? 82 );
    $convert_thumbs = ! empty( $opts['convert_thumbs'] );
    $notice         = '';

    // Handle form submission.
    if ( isset( $_POST['tlwpc_action'] ) ) {
        check_admin_referer( 'tlwpc_save', 'tlwpc_nonce' );

        if ( 'save' === $_POST['tlwpc_action'] ) {
            $quality = 82;
            if ( isset( $_POST['quality'] ) ) {
                $quality = max( 1, min( 100, (int) sanitize_text_field( wp_unslash( $_POST['quality'] ) ) ) );
            }
            $convert_thumbs = isset( $_POST['convert_thumbs'] );

            // Persist settings.
            update_option( TLWPC_OPT, compact( 'quality', 'convert_thumbs' ) );

            $notice = __( 'Settings saved.', 'tokenlink-webp-converter' );
        }
    }

    // Render page output.
    ?>
    <div class="wrap">
        <h1><?php esc_html_e( 'TokenLink WebP Converter', 'tokenlink-webp-converter' ); ?></h1>

        <?php if ( $notice ) : ?>
            <div class="notice notice-success">
                <p><?php echo esc_html( $notice ); ?></p>
            </div>
        <?php endif; ?>

        <form method="post">
            <?php wp_nonce_field( 'tlwpc_save', 'tlwpc_nonce' ); ?>
            <table class="form-table" role="presentation">
                <tr>
                    <th scope="row">
                        <label for="tlwpc_quality"><?php esc_html_e( 'WebP Quality (1–100)', 'tokenlink-webp-converter' ); ?></label>
                    </th>
                    <td>
                        <input name="quality" id="tlwpc_quality" type="number" min="1" max="100" value="<?php echo esc_attr( $quality ); ?>" />
                        <p class="description">
                            <?php esc_html_e( 'Recommended: 82 (near-lossless, 40–60% smaller).', 'tokenlink-webp-converter' ); ?>
                        </p>
                    </td>
                </tr>
                <tr>
                    <th scope="row"><?php esc_html_e( 'Convert Thumbnails', 'tokenlink-webp-converter' ); ?></th>
                    <td>
                        <label>
                            <input type="checkbox" name="convert_thumbs" value="1" <?php checked( $convert_thumbs ); ?> />
                            <?php esc_html_e( 'Also convert intermediate image sizes.', 'tokenlink-webp-converter' ); ?>
                        </label>
                    </td>
                </tr>
            </table>
            <p class="submit">
                <button class="button button-primary" name="tlwpc_action" value="save">
                    <?php esc_html_e( 'Save Settings', 'tokenlink-webp-converter' ); ?>
                </button>
            </p>
        </form>
    </div>
    <?php
}

/**
 * Add a “Settings” link directly on the Plugins list page.
 *
 * This provides a quick shortcut to the TokenLink WebP Converter
 * settings page under **Settings → TokenLink WebP**.
 *
 * @since 1.1.0
 *
 * @param string[] $links Existing plugin action links.
 * @return string[] Modified array including the Settings link.
 */
add_filter( 'plugin_action_links_' . plugin_basename( __FILE__ ), function ( $links ) {
    $link = '<a href="' . esc_url( admin_url( 'options-general.php?page=tlwpc' ) ) . '">' .
        esc_html__( 'Settings', 'tokenlink-webp-converter' ) . '</a>';
    array_unshift( $links, $link );
    return $links;
});

/* ====================================================================== */
/*  MEDIA ITEM UI                                                        */
/* ====================================================================== */

/**
 * Add WebP management controls to the Media Library attachment editor.
 *
 * This filter injects custom UI elements (“Create .webp” and “Delete Original”)
 * into the attachment edit view for eligible images (JPG or PNG). These buttons
 * allow users to generate or remove corresponding WebP versions directly from
 * the media details screen without using the bulk tools.
 *
 * Integration:
 * - Hooks into `attachment_fields_to_edit`, which modifies the attachment form
 *   fields displayed when viewing or editing an image in the Media Library.
 *
 * Behavior:
 * - Displays a “Create .webp” button if no .webp version of the image exists.
 * - Displays a “Delete Original” button if a .webp version is found, allowing
 *   removal of the original JPG/PNG.
 * - Each button includes a nonce and attachment ID, enabling secure AJAX
 *   operations handled by the corresponding actions:
 *     - `wp_ajax_tlwpc_create_webp`
 *     - `wp_ajax_tlwpc_delete_original`
 * - The status area (`#tlwpc-status`) is updated dynamically by inline JavaScript
 *   after AJAX actions complete.
 *
 * Security:
 * - Each button includes a nonce (`tlwpc_media_{attachment_id}`) verified before
 *   any server-side operation.
 * - Only applies to attachments with `image/jpeg` or `image/png` MIME types.
 *
 * @since 1.2.0 Introduced WebP create/delete UI in Media Library.
 *
 * @param array   $form_fields Existing attachment form fields.
 * @param WP_Post $post        The current attachment post object.
 * @return array Modified form fields including TokenLink WebP controls.
 */
add_filter( 'attachment_fields_to_edit', function ( $form_fields, $post ) {
    // Only apply to JPEG or PNG attachments.
    $mime = get_post_mime_type( $post );
    if ( ! in_array( $mime, [ 'image/jpeg', 'image/png' ], true ) ) {
        return $form_fields;
    }

    // Get the file path of the attachment.
    $file = get_attached_file( $post->ID );
    if ( ! $file || ! file_exists( $file ) ) {
        return $form_fields;
    }

    // Determine if a corresponding .webp file already exists.
    $webp     = preg_replace( '/\.(jpe?g|png)$/i', '.webp', $file );
    $has_webp = file_exists( $webp );
    $nonce    = wp_create_nonce( 'tlwpc_media_' . $post->ID );

    // Build the custom HTML output.
    $html = '<div id="tlwpc-wrapper">';

    if ( ! $has_webp ) {
        // Show the “Create .webp” button if no WebP exists yet.
        $html .= '<p><button type="button" class="button button-primary" id="tlwpc-create-webp" data-id="' .
            esc_attr( $post->ID ) . '" data-nonce="' . esc_attr( $nonce ) . '">' .
            esc_html__( 'Create .webp', 'tokenlink-webp-converter' ) . '</button></p>';
    } else {
        // Show the “Delete Original” button if a WebP version exists.
        $html .= '<p><button type="button" class="button" id="tlwpc-delete-original" data-id="' .
            esc_attr( $post->ID ) . '" data-nonce="' . esc_attr( $nonce ) . '">' .
            esc_html__( 'Delete Original', 'tokenlink-webp-converter' ) . '</button></p>';
    }

    // Placeholder for runtime messages (AJAX success/error).
    $html .= '<div id="tlwpc-status" style="margin-top:6px;"></div></div>';

    // Register the new field in the attachment editor UI.
    $form_fields['tlwpc_actions'] = [
        'label' => __( 'WebP Tools', 'tokenlink-webp-converter' ),
        'input' => 'html',
        'html'  => $html,
    ];

    return $form_fields;
}, 10, 2 );

/* ====================================================================== */
/*  INLINE ADMIN JAVASCRIPT                                               */
/* ====================================================================== */

/**
 * Inject inline JavaScript to handle AJAX-based WebP creation and deletion.
 *
 * This script is added to the WordPress admin footer (`admin_footer`) so that it
 * runs on the Media Library’s attachment edit screen. It provides asynchronous
 * front-end behavior for the "Create .webp" and "Delete Original" buttons that
 * were added by the `attachment_fields_to_edit` filter.
 *
 * Functionality:
 * ---------------
 * 1. **Create .webp**
 *    - Triggered by clicking the "Create .webp" button.
 *    - Sends an authenticated AJAX request (`tlwpc_create_webp`) to generate a
 *      WebP version of the selected image.
 *    - Displays a “Creating .webp…” message during processing.
 *    - Reloads the page upon success so the new WebP appears in the Media Library.
 *
 * 2. **Delete Original**
 *    - Triggered by clicking the "Delete Original" button.
 *    - Implements a **double-click confirmation** to prevent accidental deletion:
 *      the first click changes the button text and requires a second click
 *      within 5 seconds to confirm.
 *    - On confirmation, sends an authenticated AJAX request (`tlwpc_delete_original`)
 *      to remove the original JPEG/PNG and its thumbnails from disk and media records.
 *    - Redirects back to the Media Library after successful deletion.
 *
 * UX / Visual Behavior:
 * ---------------------
 * - Messages are displayed in a `#tlwpc-status` element dynamically inserted
 *   in the attachment edit page.
 * - Buttons are disabled during processing to prevent duplicate requests.
 * - Both success and error messages are styled using standard WordPress
 *   `notice notice-success` and `notice notice-error` classes.
 *
 * Security:
 * ----------
 * - All AJAX requests include per-attachment nonces created in PHP.
 * - Requests are sent via `admin-ajax.php` using the built-in `ajaxurl`.
 * - The script never handles raw file paths or sensitive data on the client side.
 *
 * @since 1.2.0 Introduced AJAX-powered WebP create/delete buttons.
 * @global string ajaxurl The WordPress AJAX endpoint automatically available in admin.
 *
 * @see tlwpc_create_webp()  Handles WebP generation on the server.
 * @see tlwpc_delete_original() Handles deletion of original files on the server.
 */
add_action( 'admin_footer', function () { ?>
<script>
(function($){
  /**
   * Display a message in the WebP status area.
   *
   * @param {string} msg  - The message to display.
   * @param {string} type - Optional WordPress notice type (e.g., 'success', 'error').
   */
  function show(msg,type){
    $('#tlwpc-status')
      .attr('class','')
      .addClass(type ? 'notice notice-'+type : '')
      .html('<p>'+msg+'</p>');
  }

  // ===========================
  // Create WebP
  // ===========================
  $(document).on('click','#tlwpc-create-webp',function(e){
    e.preventDefault();
    const b=$(this),id=b.data('id'),n=b.data('nonce');
    b.prop('disabled',true);
    show('<?php echo esc_js( __( 'Creating .webp...', 'tokenlink-webp-converter' ) ); ?>','');

    $.post(ajaxurl,{
      action:'tlwpc_create_webp',
      attachment_id:id,
      _wpnonce:n
    }).done(r=>{
      if(r && r.success){
        show(r.data.message,'success');
        // Reload to reflect the new WebP image in the library.
        setTimeout(()=>{ location.reload(); },1000);
      }else{
        show((r && r.data && r.data.message) ? r.data.message : 'Error','error');
        b.prop('disabled',false);
      }
    }).fail(()=>{
      show('Request failed','error');
      b.prop('disabled',false);
    });
  });

  // ===========================
  // Delete Original (double-click confirm)
  // ===========================
  let tlwpcConfirm=false,tlwpcTimer=null;
  $(document).on('click','#tlwpc-delete-original',function(e){
    e.preventDefault();
    const b=$(this),id=b.data('id'),n=b.data('nonce');

    if(!tlwpcConfirm){
      tlwpcConfirm=true;
      b.text('<?php echo esc_js( __( 'Click again to confirm', 'tokenlink-webp-converter' ) ); ?>');
      show('<?php echo esc_js( __( 'Confirm deletion by clicking again.', 'tokenlink-webp-converter' ) ); ?>','');
      clearTimeout(tlwpcTimer);
      tlwpcTimer=setTimeout(()=>{
        tlwpcConfirm=false;
        b.text('<?php echo esc_js( __( 'Delete Original', 'tokenlink-webp-converter' ) ); ?>');
      },5000);
      return;
    }

    // Confirmed delete
    tlwpcConfirm=false; clearTimeout(tlwpcTimer);
    b.prop('disabled',true).text('<?php echo esc_js( __( 'Deleting…', 'tokenlink-webp-converter' ) ); ?>');
    show('<?php echo esc_js( __( 'Deleting originals…', 'tokenlink-webp-converter' ) ); ?>','');

    $.post(ajaxurl,{
      action:'tlwpc_delete_original',
      attachment_id:id,
      _wpnonce:n
    }).done(r=>{
      if(r && r.success){
        show(r.data.message,'success');
        const target = (r.data && r.data.redirect) ? r.data.redirect : 'upload.php';
        setTimeout(()=>{ window.location.href = target; }, 600);
      }else{
        show((r&&r.data&&r.data.message)?r.data.message:'Error','error');
        b.prop('disabled',false).text('<?php echo esc_js( __( 'Delete Original', 'tokenlink-webp-converter' ) ); ?>');
      }
    }).fail(()=>{
      show('Request failed','error');
      b.prop('disabled',false).text('<?php echo esc_js( __( 'Delete Original', 'tokenlink-webp-converter' ) ); ?>');
    });
  });

})(jQuery);
</script>
<?php } );

/* ====================================================================== */
/*  AJAX ACTIONS                                                         */
/* ====================================================================== */

/**
 * AJAX handler: Create WebP versions of selected image attachments.
 *
 * This endpoint processes AJAX requests triggered by the “Create .webp” button
 * in the Media Library. It converts the selected JPEG or PNG image into the
 * WebP format using either Imagick or GD (via `tlwpc_save_webp_if_needed()`).
 *
 * Additionally, when the “Convert Thumbnails” option is enabled, it also
 * generates WebP versions of all intermediate image sizes associated with
 * the attachment (e.g., WordPress thumbnail, medium, large).
 *
 * Once created, the new WebP file is registered as a new media attachment
 * via `tlwpc_register_webp_attachment()` so that it appears in the library.
 *
 * Security:
 * ----------
 * - Validates nonce (`tlwpc_media_{id}`) using `check_ajax_referer()`.
 * - Restricts access to users with the `upload_files` capability.
 * - Sanitizes all POST input using `sanitize_text_field()` and `wp_unslash()`.
 *
 * Behavior:
 * ----------
 * - Returns a JSON success response containing a summary message.
 * - If an unsupported file type or missing file is detected, returns a
 *   JSON error response.
 * - Automatically skips files that already have an up-to-date WebP version.
 *
 * JSON Response Examples:
 * ------------------------
 * - Success: `{ "success": true, "data": { "message": "WebP created for 3 file(s)." } }`
 * - Error:   `{ "success": false, "data": { "message": "Unsupported or missing file" } }`
 *
 * @since 1.2.0
 * @see tlwpc_save_webp_if_needed()     Converts individual images to WebP format.
 * @see tlwpc_register_webp_attachment() Registers WebP images in the Media Library.
 * @see wp_ajax_tlwpc_delete_original   Complementary AJAX handler for deletion.
 *
 * @return void Outputs a JSON response and terminates execution.
 */
add_action( 'wp_ajax_tlwpc_create_webp', function () {
    $id = isset( $_POST['attachment_id'] )
        ? (int) sanitize_text_field( wp_unslash( $_POST['attachment_id'] ) )
        : 0;

    check_ajax_referer( 'tlwpc_media_' . $id );

    // Ensure the current user can upload files.
    if ( ! current_user_can( 'upload_files' ) ) {
        wp_send_json_error( [ 'message' => __( 'Permission denied', 'tokenlink-webp-converter' ) ] );
    }

    $file = get_attached_file( $id );
    $mime = get_post_mime_type( $id );

    // Validate the file.
    if ( ! $file || ! file_exists( $file ) || ! in_array( $mime, [ 'image/jpeg', 'image/png' ], true ) ) {
        wp_send_json_error( [ 'message' => __( 'Unsupported or missing file', 'tokenlink-webp-converter' ) ] );
    }

    // Load settings.
    $opts    = get_option( TLWPC_OPT, [] );
    $quality = (int) ( $opts['quality'] ?? 82 );
    $thumbs  = ! empty( $opts['convert_thumbs'] );
    $meta    = wp_get_attachment_metadata( $id );
    $count   = 0;

    // Convert main image.
    if ( tlwpc_save_webp_if_needed( $file, $quality ) ) {
        $count++;
    }

    // Convert thumbnails if enabled.
    if ( $thumbs && ! empty( $meta['sizes'] ) && ! empty( $meta['file'] ) ) {
        $up   = wp_get_upload_dir();
        $base = trailingslashit( $up['basedir'] );
        $path = pathinfo( $meta['file'], PATHINFO_DIRNAME );

        foreach ( $meta['sizes'] as $s ) {
            if ( empty( $s['file'] ) ) {
                continue;
            }

            $f = $base . ( $path ? $path . '/' : '' ) . $s['file'];
            if ( file_exists( $f ) && tlwpc_save_webp_if_needed( $f, $quality ) ) {
                $count++;
            }
        }
    }

    // Register WebP version in the Media Library.
    $webp = preg_replace( '/\.(jpe?g|png)$/i', '.webp', $file );
    if ( file_exists( $webp ) ) {
        tlwpc_register_webp_attachment( $webp, $id );
    }

    // Send response.
    wp_send_json_success( [
        'message' => sprintf(
            /* translators: %d: number of converted images */
            __( 'WebP created for %d file(s).', 'tokenlink-webp-converter' ),
            $count
        ),
    ] );
});

/**
 * AJAX handler: Delete original JPG/PNG image once a WebP version exists.
 *
 * This endpoint handles requests triggered by the “Delete Original” button in
 * the Media Library attachment editor. It securely deletes the original image
 * file (and its thumbnail variants) from disk and removes its attachment post
 * from the WordPress Media Library.
 *
 * The action ensures a corresponding WebP version exists before deletion to
 * prevent accidental data loss. It also performs capability and nonce checks
 * to ensure that only authorized users can execute this operation.
 *
 * Security:
 * ----------
 * - Validates nonce (`tlwpc_media_{id}`) using `wp_verify_nonce()`.
 * - Requires the `delete_post` capability for the target attachment.
 * - Sanitizes all user input with `sanitize_text_field()` and `wp_unslash()`.
 *
 * Behavior:
 * ----------
 * - Deletes the original image and all intermediate thumbnail sizes.
 * - Removes the attachment record from the Media Library.
 * - Redirects the user back to the main Media Library view after completion.
 * - If the file has already been deleted, the attachment record is still removed.
 * - Returns a JSON response with a status message and optional redirect URL.
 *
 * JSON Response Examples:
 * ------------------------
 * - Success: `{ "success": true, "data": { "message": "Original image and sizes deleted.", "redirect": "upload.php" } }`
 * - Error:   `{ "success": false, "data": { "message": "Nonce check failed." } }`
 *
 * @since 1.2.0
 * @see tlwpc_create_webp()                Complementary AJAX handler for WebP creation.
 * @see wp_delete_attachment()             Deletes attachment posts and metadata.
 * @see wp_delete_file()                   Handles file deletion from disk.
 *
 * @return void Outputs a JSON response and terminates execution.
 */
add_action( 'wp_ajax_tlwpc_delete_original', function () {
    // phpcs:ignore WordPress.Security.NonceVerification.Missing -- Nonce verified below via wp_verify_nonce() before any processing.
    if ( empty( $_POST['attachment_id'] ) || empty( $_POST['_wpnonce'] ) ) {
        wp_send_json_error( [ 'message' => __( 'Bad request.', 'tokenlink-webp-converter' ) ] );
    }

    $nonce = sanitize_text_field( wp_unslash( $_POST['_wpnonce'] ) );
    $attachment_id = isset( $_POST['attachment_id'] ) ? (int) sanitize_text_field( wp_unslash( $_POST['attachment_id'] ) ) : 0;

    if ( ! wp_verify_nonce( $nonce, 'tlwpc_media_' . $attachment_id ) ) {
        wp_send_json_error( [ 'message' => __( 'Nonce check failed.', 'tokenlink-webp-converter' ) ] );
    }

    if ( ! current_user_can( 'delete_post', $attachment_id ) ) {
        wp_send_json_error( [ 'message' => __( 'Insufficient permissions.', 'tokenlink-webp-converter' ) ] );
    }

    $mime = get_post_mime_type( $attachment_id );
    if ( ! in_array( $mime, [ 'image/jpeg', 'image/png' ], true ) ) {
        wp_send_json_error( [ 'message' => __( 'Only JPG/PNG originals can be deleted here.', 'tokenlink-webp-converter' ) ] );
    }

    $file = get_attached_file( $attachment_id );
    if ( ! $file || ! file_exists( $file ) ) {
        // File already gone — just remove from the Media Library.
        wp_delete_attachment( $attachment_id, true );
        wp_send_json_success( [
            'message'  => __( 'Original removed.', 'tokenlink-webp-converter' ),
            'redirect' => admin_url( 'upload.php' ),
        ] );
    }

    // Require an existing .webp file for safety.
    $webp = preg_replace( '/\.(jpe?g|png)$/i', '.webp', $file );
    if ( ! $webp || ! file_exists( $webp ) ) {
        wp_send_json_error( [ 'message' => __( 'No matching .webp found. Create it first.', 'tokenlink-webp-converter' ) ] );
    }

    // Delete the full-size original and all thumbnail variants.
    $metadata = wp_get_attachment_metadata( $attachment_id );
    wp_delete_file( $file );

    if ( ! empty( $metadata['sizes'] ) && ! empty( $metadata['file'] ) ) {
        $upload_dir = wp_get_upload_dir();
        $base_dir   = trailingslashit( $upload_dir['basedir'] );
        $base_path  = pathinfo( $metadata['file'], PATHINFO_DIRNAME );

        foreach ( $metadata['sizes'] as $size ) {
            if ( empty( $size['file'] ) ) {
                continue;
            }
            $thumb = $base_dir . ( $base_path ? $base_path . '/' : '' ) . $size['file'];
            if ( file_exists( $thumb ) ) {
                wp_delete_file( $thumb );
            }
        }
    }

    // Remove the attachment post so it disappears from the library.
    wp_delete_attachment( $attachment_id, true );

    wp_send_json_success( [
        'message'  => __( 'Original image and sizes deleted.', 'tokenlink-webp-converter' ),
        'redirect' => admin_url( 'upload.php' ),
    ] );
} );

/* ====================================================================== */
/*  CORE HELPERS                                                         */
/* ====================================================================== */

/**
 * Converts a JPEG or PNG image to WebP format if needed.
 *
 * This function checks whether a `.webp` version of the given image file already exists
 * and whether it is up to date. If no valid WebP exists—or the original image has been
 * modified more recently—it generates a new WebP file using the best available method:
 *
 * 1. **Imagick (preferred)** – Uses the Imagick PHP extension if installed.
 *    - Strips image metadata (EXIF, ICC, etc.) when supported.
 *    - Sets compression quality according to the `$quality` argument.
 * 2. **GD Fallback** – If Imagick is unavailable, falls back to the GD library.
 *    - Creates the WebP image via `imagecreatefromstring()` and `imagewebp()`.
 *
 * Silent failures are caught and suppressed to avoid breaking upload or AJAX workflows.
 *
 * Performance / Behavior:
 * -----------------------
 * - Skips conversion when the WebP file already exists and is newer than the source file.
 * - Returns `true` only if a WebP file was successfully created or updated.
 * - Returns `false` if conversion failed or was unnecessary.
 *
 * Security:
 * ----------
 * - No direct file uploads are handled here.
 * - The `$src` path is assumed to be a trusted file path provided by WordPress APIs.
 *
 * @since 1.2.0
 *
 * @param string $src     Full filesystem path to the source image (.jpg, .jpeg, or .png).
 * @param int    $quality Compression quality for WebP output (1–100).
 *
 * @return bool True if the WebP was created or updated successfully, false otherwise.
 *
 * @see Imagick::setImageCompressionQuality()
 * @see imagewebp()
 * @see tlwpc_register_webp_attachment()
 */
function tlwpc_save_webp_if_needed( $src, $quality ) {
    $dst = preg_replace('/\.(jpe?g|png)$/i','.webp',$src);
    if(!$dst)return false;
    $src_m=@filemtime($src);$dst_m=file_exists($dst)?@filemtime($dst):0;
    if($dst_m>=$src_m)return false;

    if(class_exists('Imagick')){
        try{
            $i=new Imagick($src);
            if(method_exists($i,'stripImage'))$i->stripImage();
            $i->setImageFormat('webp');
            if(method_exists($i,'setImageCompressionQuality'))$i->setImageCompressionQuality($quality);
            $ok=$i->writeImage($dst);
            $i->clear();$i->destroy();
            if($ok&&file_exists($dst))return true;
        }catch(Exception $e){}
    }
    if(function_exists('imagecreatefromstring')&&function_exists('imagewebp')){
        $d=@file_get_contents($src);if(false===$d)return false;
        $im=@imagecreatefromstring($d);if(false===$im)return false;
        $ok=imagewebp($im,$dst,$quality);imagedestroy($im);
        if($ok&&file_exists($dst))return true;
    }
    return false;
}

/**
 * Deletes an original JPEG/PNG file and all associated thumbnail variants
 * if corresponding `.webp` files exist for each image.
 *
 * This function ensures that only images safely converted to WebP are removed
 * from disk. It checks both the main source file and all intermediate (thumbnail)
 * image sizes listed in the WordPress attachment metadata.
 *
 * Behavior:
 * ---------
 * - Only deletes a file if a matching `.webp` exists in the same directory.
 * - Supports recursive cleanup of all image sizes defined in `$meta['sizes']`.
 * - Returns a count of successfully deleted files.
 *
 * Usage:
 * ------
 * Used internally by the “Delete Original” action in the admin interface
 * to remove redundant source images after conversion.
 *
 * @since 1.2.0
 *
 * @param string $file Full path to the original image file (.jpg, .jpeg, or .png).
 * @param array  $meta Attachment metadata containing thumbnail size definitions.
 *
 * @return int Number of deleted files (including the main file and thumbnails).
 *
 * @see wp_delete_file()
 * @see wp_get_upload_dir()
 */
function tlwpc_delete_original_tree( $file, $meta ) {
    $r=0;$w=preg_replace('/\.(jpe?g|png)$/i','.webp',$file);
    if(file_exists($w)&&file_exists($file)){wp_delete_file($file);$r++;}
    if(!empty($meta['sizes'])&&!empty($meta['file'])){
        $u=wp_get_upload_dir();$b=trailingslashit($u['basedir']);$p=pathinfo($meta['file'],PATHINFO_DIRNAME);
        foreach($meta['sizes'] as $s){
            if(empty($s['file']))continue;
            $t=$b.($p?$p.'/':'').$s['file'];$tw=preg_replace('/\.(jpe?g|png)$/i','.webp',$t);
            if(file_exists($tw)&&file_exists($t)){wp_delete_file($t);$r++;}
        }
    }
    return $r;
}

/**
 * Registers a generated `.webp` file as a new attachment in the WordPress Media Library.
 *
 * This function ensures that WebP files created by the plugin appear as proper
 * media entries in the Media Library. The new attachment inherits metadata and
 * organizational hierarchy from its parent image (if provided).
 *
 * Behavior:
 * ---------
 * - Detects MIME type using `wp_check_filetype()`.
 * - Creates a new attachment post with `inherit` status.
 * - Associates the WebP image with the original image’s parent post (if available).
 * - Generates and stores standard WordPress image metadata via `wp_generate_attachment_metadata()`.
 *
 * Usage:
 * ------
 * Called automatically after successful WebP creation to ensure
 * that the image is visible in the Media Library.
 *
 * @since 1.2.0
 *
 * @param string $webp_path  Absolute path to the generated `.webp` image file.
 * @param int    $parent_id  Optional. The parent attachment ID (original image). Default 0.
 *
 * @return int|false Attachment ID on success, or false on failure.
 *
 * @see wp_insert_attachment()
 * @see wp_generate_attachment_metadata()
 * @see wp_update_attachment_metadata()
 */
function tlwpc_register_webp_attachment( $webp_path, $parent_id = 0 ) {
    $type = wp_check_filetype( basename( $webp_path ), null );
    if ( empty( $type['type'] ) ) return false;

    $up = wp_upload_dir();
    $attachment = array(
        'guid'           => $up['url'] . '/' . basename( $webp_path ),
        'post_mime_type' => $type['type'],
        'post_title'     => preg_replace( '/\.[^.]+$/', '', basename( $webp_path ) ),
        'post_content'   => '',
        'post_status'    => 'inherit',
        'post_parent'    => $parent_id,
    );
    $attach_id = wp_insert_attachment( $attachment, $webp_path, $parent_id );
    if ( is_wp_error( $attach_id ) ) return false;

    require_once ABSPATH . 'wp-admin/includes/image.php';
    $data = wp_generate_attachment_metadata( $attach_id, $webp_path );
    wp_update_attachment_metadata( $attach_id, $data );

    return $attach_id;
}